#region HttpPost

        [HttpPost(Name = nameof(CreatePatientForCompany))]
        public async Task<IActionResult> CreatePatientForCompany([FromRoute]Guid companyId,
                                                                  [FromBody]PatientAddDto Patient)
        //此处的 [FromRoute] 与 [FromBody] 其实不指定也可以，会自动匹配
        {
            if (!await _patientRepository.CompanyExistsAsync(companyId))
            {
                return NotFound();
            }
            var entity = _mapper.Map<Patient>(Patient);
            _patientRepository.AddPatient(companyId, entity);
            await _patientRepository.SaveAsync();
            var returnDto = _mapper.Map<PatientDto>(entity);
            return CreatedAtAction(nameof(GetPatientForCompany),
                                    new { companyId = returnDto.CompanyId, PatientId = returnDto.Id },
                                    returnDto);
        }

        #endregion HttpPost

        #region HttpPut

        //整体更新/替换，PUT不是安全的，但是幂等
        [HttpPut("{PatientId}")]
        public async Task<IActionResult> UpdatePatientForCompany(Guid companyId,
                                                                  Guid PatientId,
                                                                  PatientUpdateDto PatientUpdateDto)
        {
            if (!await _patientRepository.CompanyExistsAsync(companyId))
            {
                return NotFound();
            }

            var PatientEntity = await _patientRepository.GetPatientAsync(companyId, PatientId);
            if (PatientEntity == null)
            {
                //不允许客户端生成 Guid
                //return NotFound();

                //允许客户端生成 Guid
                var PatientToAddEntity = _mapper.Map<Patient>(PatientUpdateDto);
                PatientToAddEntity.Id = PatientId;
                _patientRepository.AddPatient(companyId, PatientToAddEntity);
                await _patientRepository.SaveAsync();
                var returnDto = _mapper.Map<PatientDto>(PatientToAddEntity);
                return CreatedAtAction(nameof(GetPatientForCompany),
                                        new { companyId = companyId, PatientId = PatientId },
                                        returnDto);
            }

            //把 updateDto 映射到 entity
            _mapper.Map(PatientUpdateDto, PatientEntity);
            _patientRepository.UpdatePatient(PatientEntity);
            await _patientRepository.SaveAsync();
            return NoContent(); //返回状态码204
        }

        #endregion HttpPut

        #region HttpPatch

        /*
         * HTTP PATCH 举例（视频P32）
         * 原资源：
         *      {
         *        "baz":"qux",
         *        "foo":"bar"
         *      }
         * 
         * 请求的 Body:
         *      [
         *        {"op":"replace","path":"/baz","value":"boo"},
         *        {"op":"add","path":"/hello","value":["world"]},
         *        {"op":"remove","path":"/foo"}
         *      ]
         *      
         * 修改后的资源：
         *      {
         *        "baz":"boo",
         *        "hello":["world"]
         *      }
         *      
         * JSON PATCH Operations:
         * Add:
         *   {"op":"add","path":"/biscuits/1","value":{"name","Ginger Nut"}}
         * Replace:
         *   {"op":"replace","path":"/biscuits/0/name","value":"Chocolate Digestive"}
         * Remove:
         *   {"op":"remove","path":"/biscuits"}
         *   {"op":"remove","path":"/biscuits/0"}
         * Copy:
         *   {"op":"copy","from":"/biscuits/0","path":"/best_biscuit"}
         * Move:
         *   {"op":"move","from":"/biscuits","path":"/cookies"}
         * Test:
         *   {"op":"test","path":"/best_biscuit","value":"Choco Leibniz}
         */
        [HttpPatch("{PatientId}")]
        public async Task<IActionResult> PartiallyUpdatePatientForCompany(Guid companyId,
                                                                           Guid PatientId,
                                                                           JsonPatchDocument<PatientUpdateDto> patchDocument)
        {
            if (!await _patientRepository.CompanyExistsAsync(companyId))
            {
                return NotFound();
            }

            var PatientEntity = await _patientRepository.GetPatientAsync(companyId, PatientId);
            if (PatientEntity == null)
            {
                //不允许客户端生成 Guid
                //return NotFound();

                //允许客户端生成 Guid
                var PatientDto = new PatientUpdateDto();
                //传入 ModelState 进行验证
                patchDocument.ApplyTo(PatientDto, ModelState);
                if (!TryValidateModel(PatientDto))
                {
                    return ValidationProblem(ModelState);
                }

                var PatientToAdd = _mapper.Map<Patient>(PatientDto);
                PatientToAdd.Id = PatientId;
                _patientRepository.AddPatient(companyId, PatientToAdd);
                await _patientRepository.SaveAsync();
                var dtoToReturn = _mapper.Map<Patient>(PatientToAdd);

                return CreatedAtAction(nameof(GetPatientForCompany),
                                    new { companyId = companyId, PatientId = PatientId },
                                    dtoToReturn);
            }

            var dtoToPatch = _mapper.Map<PatientUpdateDto>(PatientEntity);
            //将 Patch 应用到 dtoToPatch（PatientUpdateDto）
            patchDocument.ApplyTo(dtoToPatch);
            //验证模型
            if (!TryValidateModel(dtoToPatch))
            {
                return ValidationProblem(ModelState); //返回状态码与错误信息
            }
            _mapper.Map(dtoToPatch, PatientEntity);
            _patientRepository.UpdatePatient(PatientEntity);
            await _patientRepository.SaveAsync();
            return NoContent(); //返回状态码204
        }

        #endregion HttpPatch

        #region HttpDelete

        [HttpDelete("{PatientId}")]
        public async Task<IActionResult> DeletePatientForCompany(Guid companyId, Guid PatientId)
        {
            if (!await _patientRepository.CompanyExistsAsync(companyId))
            {
                return NotFound();
            }

            var PatientEntity = await _patientRepository.GetPatientAsync(companyId, PatientId);
            if (PatientEntity == null)
            {
                return NotFound();
            }

            _patientRepository.DeletePatient(PatientEntity);
            await _patientRepository.SaveAsync();
            return NoContent();
        }

        #endregion HttpDelete

        #region HttpOptions

        [HttpOptions]
        public IActionResult GetCompaniesOptions()
        {
            Response.Headers.Add("Allowss", "DELETE,GET,PATCH,PUT,OPTIONS");
            return Ok();
        }

        #endregion HttpOptions
        #endregion Controllers

        #region Functions

        /// <summary>
        /// 重写 ValidationProblem（视频P32）
        /// 使 PartiallyUpdatePatientForCompany 中的 ValidationProblem() 返回状态码422而不是400
        /// </summary>
        /// <param name="modelStateDictionary"></param>
        /// <returns></returns>
        public override ActionResult ValidationProblem(ModelStateDictionary modelStateDictionary)
        {
            var options = HttpContext.RequestServices
                                        .GetRequiredService<IOptions<ApiBehaviorOptions>>();
            return (ActionResult)options.Value.InvalidModelStateResponseFactory(ControllerContext);
        }

        #endregion Functions
  